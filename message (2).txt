import psycopg2
from dotenv import load_dotenv
import os
import uuid

# Load environment variables from .env
load_dotenv()

# Fetch database credentials from environment variables
USER = os.getenv("user")
PASSWORD = os.getenv("password")
HOST = os.getenv("host")
PORT = os.getenv("port")
DBNAME = os.getenv("dbname")

def get_db_connection():
    """Establishes and returns a new database connection."""
    try:
        connection = psycopg2.connect(
            user=USER,
            password=PASSWORD,
            host=HOST,
            port=PORT,
            dbname=DBNAME
        )
        print("Connection successful!")
        return connection
    except Exception as e:
        print(f"Failed to connect to the database: {e}")
        return None

def insert_rule(session_id, expert_name, expertise_area, rule_text):
    """Inserts a new rule into the interview_rules table."""
    conn = get_db_connection()
    if conn is None:
        return
    
    try:
        cursor = conn.cursor()
        sql = """
            INSERT INTO interview_rules (session_id, expert_name, expertise_area, rule_text)
            VALUES (%s, %s, %s, %s) RETURNING id;
        """
        cursor.execute(sql, (session_id, expert_name, expertise_area, rule_text))
        new_id = cursor.fetchone()[0]
        conn.commit()
        print(f"Successfully inserted rule with ID: {new_id}")
        return new_id
    except (Exception, psycopg2.Error) as error:
        print(f"Error while inserting into interview_rules table: {error}")
        conn.rollback()  # Roll back the transaction on error
    finally:
        if conn:
            cursor.close()
            conn.close()
            print("Database connection closed.")

def update_rule_completion(rule_id, completed=True):
    """Updates the 'completed' status of a specific rule by its ID."""
    conn = get_db_connection()
    if conn is None:
        return

    try:
        cursor = conn.cursor()
        sql = """
            UPDATE interview_rules SET completed = %s WHERE id = %s;
        """
        cursor.execute(sql, (completed, rule_id))
        conn.commit()
        if cursor.rowcount > 0:
            print(f"Successfully updated rule with ID: {rule_id}")
            return True
        else:
            print(f"No rule found with ID: {rule_id}. No updates were made.")
            return False
    except (Exception, psycopg2.Error) as error:
        print(f"Error while updating interview_rules table: {error}")
        conn.rollback()
    finally:
        if conn:
            cursor.close()
            conn.close()
            print("Database connection closed.")
            
def delete_rule(rule_id):
    """Deletes a rule from the interview_rules table by its ID."""
    conn = get_db_connection()
    if conn is None:
        return

    try:
        cursor = conn.cursor()
        sql = """
            DELETE FROM interview_rules WHERE id = %s;
        """
        cursor.execute(sql, (rule_id,)) # The comma is important for a single-item tuple
        conn.commit()
        if cursor.rowcount > 0:
            print(f"Successfully deleted rule with ID: {rule_id}")
            return True
        else:
            print(f"No rule found with ID: {rule_id}. No deletions were made.")
            return False
    except (Exception, psycopg2.Error) as error:
        print(f"Error while deleting from interview_rules table: {error}")
        conn.rollback()
    finally:
        if conn:
            cursor.close()
            conn.close()
            print("Database connection closed.")

# --- Example Usage ---
if __name__ == "__main__":
    # 1. Insert a new rule
    session_id_1 = str(uuid.uuid4())
    new_rule_id = insert_rule(
        session_id=session_id_1,
        expert_name="Dr. Jane Doe",
        expertise_area="AI Ethics",
        rule_text="The AI must not generate biased content."
    )

    if new_rule_id:
        print("\n--- Performing Update Operation ---")
        # 2. Update the 'completed' status of the newly inserted rule
        update_rule_completion(new_rule_id, completed=True)

        print("\n--- Performing Delete Operation ---")
        # 3. Delete the rule
        delete_rule(new_rule_id)

    print("\n--- End of Operations ---")